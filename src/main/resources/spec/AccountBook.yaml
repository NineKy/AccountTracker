openapi: 3.0.0
info:
  version: '1.0.0'
  title: 'Account Book'
  description: 'account book api document'
servers:
  - url: http://localhost:10001
tags:
  - name: "Util"
    description: "Utility API"
  - name: "User"
    description: "User API"
  - name: "Transaction"
    description: "Transaction API"
  - name: "Tag"
    description: "Tag API"

paths:
  /check/working:
    get:
      tags:
        - "Util"
      summary: "check yaml working"
      description: "check yaml working"
      operationId: checkYaml
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckSuccessDto'
        400:
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        500:
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'

  /util/html/table/generate:
    post:
      tags:
        - "Util"
      summary: "generate html table"
      description: "generate html table"
      operationId: generateHtmlTable
      requestBody:
        description: "generate html table request - keys"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateHtmlTableRequestDto'
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenerateHtmlTableResponseDto'
        400:
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'

  ######################################################
  ###### 사용자_API
  ######################################################
  /user:
    post:
      tags:
        - "User"
      summary: "create user"
      description: "create user"
      operationId: createUser
      requestBody:
        description: "create user request"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequestDto'
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUserResponseDto'
        400:
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
  /user/{userId}:
    put:
      tags:
        - "User"
      summary: "update user"
      description: "update user"
      operationId: updateUser
      parameters:
        - name: "userId"
          in: "path"
          description: "user id"
          required: true
          schema:
            type: "string"
      requestBody:
        description: "update user info"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequestDto'
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserResponseDto'
        400:
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
    delete:
      tags:
        - "User"
      summary: "delete user"
      description: "delete user"
      operationId: deleteUser
      parameters:
        - name: "userId"
          in: "path"
          description: "user id"
          required: true
          schema:
            type: "string"
      responses:
        200:
          description: "Success"
        400:
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'

  /user/{userId}/info:
    get:
      tags:
        - "User"
      summary: "get user"
      description: "find user"
      operationId: getUser
      parameters:
        - name: "userId"
          in: "path"
          description: "user id"
          required: true
          schema:
            type: "string"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserResponseDto'
        400:
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'

  /user/login:
    post:
      tags:
        - "User"
      summary: "login user"
      description: "login user"
      operationId: loginUser
      requestBody:
        description: "login user request"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginUserRequestDto'
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginUserResponseDto'
        400:
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'

  /user/find/name:
    get:
      tags:
        - "User"
      summary: "find user info by name"
      description: "find user info by name"
      operationId: findUserInfoByName
      parameters:
        - name: "name"
          in: "query"
          description: "user name"
          required: true
          schema:
            type: "string"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserResponseDto'
        400:
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'


  ######################################################
  ###### 사용내역_API
  ######################################################
  /transaction:
    post:
      tags:
        - "Transaction"
      summary: "record transaction"
      description: "record transaction"
      operationId: postTransaction
      requestBody:
        description: "post transaction request body"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostTranRequestDto'
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostTransResponseDto'
        400:
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
  /transaction/{utid}:
    get:
      tags:
        - "Transaction"
      summary: "get single transaction"
      description: "get single transaction"
      operationId: getSingleTransaction
      parameters:
        - $ref: '#/components/parameters/path-utid'
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSingleTransResponseDto'
        400:
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'

    delete:
      tags:
        - "Transaction"
      summary: "delete single transaction"
      description: "delete single transaction"
      operationId: deleteSingleTransaction
      parameters:
        - $ref: '#/components/parameters/path-utid'
      responses:
        200:
          description: "Success"
        400:
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'

  ######################################################
  ###### 사용내역 태그_API
  ######################################################
  /tag:
    post:
      tags:
        - "Tag"
      summary: "save Tag"
      description: "save Tag"
      operationId: postTag
      requestBody:
        description: "post tag dto request body"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostSingleTagDto'
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSingleTagDto'
        400:
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'

  /tag/admin/{tagId}:
    post:
      tags:
        - "Tag"
      summary: "save Tag admin - delete>save"
      description: "save Tag admin - delete>save"
      operationId: postAdminTag
      parameters:
        - $ref: '#/components/parameters/path-tagId'
      requestBody:
        description: "post tag dto request body"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostSingleTagDto'
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSingleTagDto'
        400:
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'

  /tag/list:
    get:
      tags:
        - "Tag"
      summary: "get All tags"
      description: "get All tags"
      operationId: getAllTags
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetSingleTagDto'
        400:
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'

  /tag/{tagId}:
    delete:
      tags:
        - "Tag"
      summary: "delete single tag"
      description: "delete single tag"
      operationId: deleteSingleTag
      parameters:
        - $ref: '#/components/parameters/path-tagId'
      responses:
        200:
          description: "Success"
        400:
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'

    put:
      tags:
        - "Tag"
      summary: "update single tag"
      description: "update single tag"
      operationId: updateSingleTag
      parameters:
        - $ref: '#/components/parameters/path-tagId'
      requestBody:
        description: "update tag dto request body"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostSingleTagDto'
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSingleTagDto'
        400:
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'


components:
  schemas:
    GetListTagDto:
      type: object
      properties:
        tagList:
          type: array
          items:
            $ref: '#/components/schemas/GetSingleTagDto'

    LoginUserRequestDto:
      type: object
      properties:
        id:
          type: string
          nullable: false
          description: "user login id(String)"
          example: "kd.shim"
        password:
          type: string
          nullable: false
          description: "user password"
          example: "qwer1234"

    LoginUserResponseDto:
      type: object
      properties:
        successAble:
          type: boolean
          description: "login success"
          example: true
        loginAt:
          type: string
          description: "user create date(yyyymmddHHmmss)"
          example: "20230129011000"

    CheckSuccessDto:
      type: object
      properties:
        success:
          type: boolean
          description: "check success"
          example: true
    CreateUserRequestDto:
      type: object
      properties:
        id:
          type: string
          nullable: false
          description: "user login id(String)"
          example: "loginId"
        name:
          type: string
          nullable: false
          description: "user name"
          example: "kdshim"
        password:
          type: string
          nullable: false
          description: "user password"
          example: "qwer1234"
    UpdateUserRequestDto:
      type: object
      properties:
        name:
          type: string
          description: "user name"
          example: "kdshim"
        password:
          type: string
          description: "user password"
          example: "qwer1234"

    CreateUserResponseDto:
      type: object
      properties:
        id:
          type: string
          description: "user login id(String)"
          example: "loginId"
        name:
          type: string
          description: "user name"
          example: "kdshim"
        password:
          type: string
          description: "user password"
          example: "qwer1234"
        createdAt:
          type: string
          description: "user create date(yyyymmddHHmmss)"
          example: "20230124013000"
        updatedAt:
          type: string
          description: "user update date(yyyymmddHHmmss)"
          example: "20230124013000"

    GetUserResponseDto:
      type: object
      properties:
        id:
          type: string
          description: "user login id(String)"
          example: "loginId"
        name:
          type: string
          description: "user name"
          example: "kdshim"
        password:
          type: string
          description: "user password"
          example: "qwer1234"
        createdAt:
          type: string
          description: "user create date(yyyymmddHHmmss)"
          example: "20230129011000"
        updatedAt:
          type: string
          description: "user update date(yyyymmddHHmmss)"
          example: "20230129011000"

    GenerateHtmlTableRequestDto:
      type: object
      properties:
        keys:
          type: array
          items:
            type: string
          description: "generate html table request - keys"
          nullable: false
          example: [ "key1", "key2", "key3" ]
        #        values:
        #          type: array
        #          items:
        #            type: string
        #          description: "generate html table request - values"
        #          nullable: false
        #          example: [ "key1", "key2", "key3" ]
        values:
          type: string
          description: "generate html table request - values pure string"
          nullable: false
          example: "value1 value2 value3"

    GenerateHtmlTableResponseDto:
      type: object
      properties:
        htmlString:
          type: string
          description: "generate html table response - html"
          example: "<table><tr><td>key1</td><td>key2</td><td>key3</td></tr><tr><td>value1</td><td>value2</td><td>value3</td></tr></table>"

    PostTranRequestDto:
      type: object
      properties:
        amount:
          type: integer
          nullable: false
          description: "usage amount"
          example: 2800
        registeredAt:
          type: string
          nullable: false
          description: "registered time yyyyMMdd HH24:mm:si"
        title:
          type: string
          description: "main purpose for the transaction"
        content:
          type: string
          description: "additional memo for the transaction"
        tagId:
          type: integer
          nullable: false
          description: "tag of the transaction"
        moneyType:
          type: string
          nullable: false
          enum:
            - FREE
            - MINE

    PostTransResponseDto:
      type: object
      properties:
        id:
          type: string
          description: "unique transaction id"

    GetSingleTransResponseDto:
      type: object
      properties:
        utid:
          type: string
          description: "unique transaction id"
        amount:
          type: integer
          description: "usage amount"
          example: 2800
        registeredAt:
          type: string
          description: "registered time yyyyMMdd HH24:mm:si"
        title:
          type: string
          description: "main purpose for the transaction"
        content:
          type: string
          description: "additional memo for the transaction"
        tagId:
          type: integer
          description: "tag type of the transaction"
        moneyType:
          type: string
          enum:
            - FREE
            - MINE
        created:
          type: string
          description: "created time yyyyMMdd HH24:mm:si"
        updated:
          type: string
          description: "updated time yyyyMMdd HH24:mm:si"

    PostSingleTagDto:
      type: object
      properties:
        name:
          type: string
          description: "tag name"
        color:
          type: string
          description: "tag color"

    GetSingleTagDto:
      type: object
      properties:
        id:
          type: integer
          description: "tag id"
        name:
          type: string
          description: "tag name"
        color:
          type: string
          description: "tag color"
        created:
          type: string
          description: "created time yyyyMMdd HH24:mm:si"
        updated:
          type: string
          description: "updated time yyyyMMdd HH24:mm:si"

    #####################################
    #### 일반적으로 상춍
    #####################################
    ErrorResponseDto:
      type: object
      properties:
        code:
          type: string
        message:
          type: string

    userId:
      type: string
      description: "시용자아이디"
      example: "testUserId"

  parameters:
    path-utid:
      name: utid
      in: path
      description: "트랜잭션의 고유 아이디"
      required: true
      schema:
        type: string
        example: "UT202302160001"

    path-tagId:
      name: tagId
      in: path
      description: "태그의 고유 아이디"
      required: true
      schema:
        type: number
        example: 1
